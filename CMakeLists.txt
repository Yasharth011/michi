cmake_minimum_required(VERSION 3.1.0)

project(Michi VERSION 0.1 LANGUAGES CXX)

if(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})
message(FATAL_ERROR “In-source build detected!”)
endif()

set(CMAKE_BUILD_TYPE Debug)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wfatal-errors")

find_program(CCACHE_PROGRAM ccache)
if (CCACHE_PROGRAM)
    set(CMAKE_C_COMPILER_LAUNCHER ${CCACHE_PROGRAM})
    set(CMAKE_CXX_COMPILER_LAUNCHER ${CCACHE_PROGRAM})
    message(STATUS "Ccache found: ${CCACHE_PROGRAM}")
else ()
    message(STATUS "Ccache not found")
endif ()

find_package(gz-msgs10 REQUIRED)
find_package(gz-transport13 REQUIRED)
find_package(PCL REQUIRED)
find_package(OpenCV REQUIRED)
find_package(realsense2 REQUIRED)
find_package(Eigen3 3.3 REQUIRED)
find_package(spdlog REQUIRED)
find_package(octomap REQUIRED)
find_package(ompl REQUIRED)
find_package(CGAL REQUIRED)
find_package(MORB_SLAM REQUIRED COMPONENTS MORB_SLAM DBoW2 g2o sophus)
pkg_check_modules(MAVLink mavlink_c)
pkg_check_modules(Asio asio)
pkg_check_modules(Cobs cobs)
pkg_check_modules(Fusion Fusion)

# add_subdirectory(cmake/cmake-git-version-tracking)

add_library(Michi lib/realsense_generator.cpp lib/mobilenet_arrow.cpp lib/ardupilot_interface.cpp lib/gazebo_interface.cpp lib/yolov8_arrow.cpp)
target_compile_options(Michi PUBLIC -fcoroutines -fdiagnostics-color=always)
target_include_directories(Michi PUBLIC lib ${Asio_INCLUDE_DIRS} ${Cobs_INCLUDE_DIRS} ${OpenCV_INCLUDE_DIRS} ${realsense_INCLUDE_DIR}
    ${PCL_INCLUDE_DIRS} PRIVATE ${MAVLink_INCLUDE_DIRS} ${OCTOMAP_INCLUDE_DIRS} ${OMPL_INCLUDE_DIRS})
target_link_libraries(Michi PRIVATE ${PCL_LIBRARIES} ${OpenCV_LIBS} ${Cobs_LDFLAGS} ${OCTOMAP_LIBRARIES} ${OMPL_LIBRARIES}
    libzmq sqlite3 libonnxruntime.so PUBLIC ${realsense2_LIBRARY} Eigen3::Eigen spdlog::spdlog gz-transport13 gz-msgs10 MORB_SLAM::MORB_SLAM
)
file(GLOB PCH_INCLUDES "lib/*.hpp")
set(PRECOMPILED_HEADER ${PCH_INCLUDES})
# target_precompile_headers(${PROJECT_NAME} PRIVATE ${PRECOMPILED_HEADER})

option(BUILD_RS_PCL_SCRIPT "Build rs-pcl-color.cpp script for prototyping" OFF)
if (BUILD_RS_PCL_SCRIPT)
    find_package(glfw3 3.2 REQUIRED)
    find_package(OpenGL REQUIRED)
    add_executable (rs-pcl-color bin/rs-pcl-color.cpp)
    message("rs-pcl-color requires C++11, it does not compile with C++20")
    set_property(TARGET rs-pcl-color PROPERTY CXX_STANDARD 11)
    target_include_directories(rs-pcl-color PUBLIC ${realsense_INCLUDE_DIR}
        PRIVATE ${PCL_INCLUDE_DIRS})
    include(CMakePrintHelpers)
    link_directories(${PCL_LIBRARY_DIRS})
    cmake_print_variables("${PCL_LIBRARY_DIRS}")
    target_link_directories(rs-pcl-color PRIVATE ${PCL_LIBRARY_DIRS})
    target_compile_definitions(rs-pcl-color PRIVATE ${PCL_DEFINITIONS})
    target_link_libraries(rs-pcl-color ${PCL_LIBRARIES} ${OpenCV_LIBS} 
        ${realsense2_LIBRARY} Eigen3::Eigen glfw ${OPENGL_LIBRARIES})
endif()

pkg_search_module(GTEST 1.12 REQUIRED gtest_main)
add_executable(test_realsense_generator tests/test_realsense_generator.cpp)
add_dependencies(test_realsense_generator Michi)
target_link_libraries(test_realsense_generator PRIVATE Michi ${GTEST_LDFLAGS} -fsanitize=address)

option(BUILD_TESTS "Build tests" ON)
if (BUILD_TESTS)
    add_executable(test_mobilenet_arrow tests/test_mobilenet_arrow.cpp)
    add_dependencies(test_mobilenet_arrow Michi)
    target_link_libraries(test_mobilenet_arrow PRIVATE Michi ${GTEST_LDFLAGS} -fsanitize=address)
    add_executable(test_yolov8_arrow tests/test_yolov8_arrow.cpp)
    add_dependencies(test_yolov8_arrow Michi)
    target_link_libraries(test_yolov8_arrow PRIVATE Michi ${GTEST_LDFLAGS} -fsanitize=address)
    add_executable(test_ardupilot_interface tests/test_ardupilot_interface.cpp)
    add_dependencies(test_ardupilot_interface Michi)
    target_link_libraries(test_ardupilot_interface PRIVATE Michi ${GTEST_LDFLAGS} -fsanitize=address)
    add_executable(test_gazebo_interface tests/test_gazebo_interface.cpp)
    add_dependencies(test_gazebo_interface Michi)
    target_link_libraries(test_gazebo_interface PRIVATE Michi gz-msgs10  ${GTEST_LDFLAGS} -fsanitize=address)
    # add_executable(test_cobs tests/test_cobs.cpp)
    # target_include_directories(test_cobs ${Cobs_INCLUDE_DIRS})
    # target_link_libraries(test_cobs PRIVATE ${GTEST_LDFLAGS} ${COBS_LDFLAGS} -fsanitize=address)
    add_executable(test_aruco_detector tests/test_aruco_detector.cpp)
    add_dependencies(test_aruco_detector Michi)
    target_link_libraries(test_aruco_detector PRIVATE Michi ${GTEST_LDFLAGS} -fsanitize=address)
    # add_executable(test_ananta tests/test_ananta.cpp)
    # add_dependencies(test_ananta Michi)
    # target_link_libraries(test_ananta PRIVATE Michi ${GTEST_LDFLAGS} -fsanitize=address)
    add_executable(test_mother_interface tests/test_mother_interface.cpp)
    add_dependencies(test_mother_interface Michi)
    target_link_libraries(test_mother_interface PRIVATE Michi gz-msgs10  ${GTEST_LDFLAGS} -fsanitize=address)
endif()

find_package(argparse REQUIRED)
option(BUILD_ARAR_PLANNER "Build ararplanner" OFF)
if(BUILD_ARAR_PLANNER)
    add_executable(arar_planner bin/arrow_ardupilot_planner.cpp)
    add_dependencies(arar_planner Michi)
    target_include_directories(arar_planner PRIVATE argparse)
    target_link_libraries(arar_planner PRIVATE Michi -fsanitize=address)
endif()

option(BUILD_aruar_PLANNER "Build aruarplanner" OFF)
if(BUILD_aruar_PLANNER)
    add_executable(aruar_planner bin/aruco_ardupilot_planner.cpp)
    add_dependencies(aruar_planner Michi)
    target_include_directories(aruar_planner PRIVATE argparse)
    target_link_libraries(aruar_planner PRIVATE Michi -fsanitize=address)
endif()

add_executable(ananta bin/ananta.cpp)
add_dependencies(ananta Michi)
target_include_directories(ananta PRIVATE ${Fusion_INCLUDE_DIRS} argparse)
target_link_libraries(ananta PRIVATE ${Fusion_LDFLAGS} CGAL::CGAL Michi -fsanitize=address)
target_precompile_headers(ananta PRIVATE ${PRECOMPILED_HEADER})

option(BUILD_MOBILENET_SCRIPT "Build run_mobilenet_arrow.cpp for running models" OFF)
if (BUILD_MOBILENET_SCRIPT)
    add_executable(run_mobilenet_arrow bin/run_mobilenet_arrow.cpp)
    add_dependencies(run_mobilenet_arrow Michi)
    target_link_libraries(run_mobilenet_arrow PRIVATE Michi ${GTEST_LDFLAGS} -fsanitize=address)
endif()

option(BUILD_ANNOTATE_ARROW_SCRIPT "Build annotate_arrow.cpp for annotating arrow detection" OFF)
if (BUILD_ANNOTATE_ARROW_SCRIPT)
    add_executable(annotate_arrow bin/annotate_arrow.cpp)
    add_dependencies(annotate_arrow Michi)
    target_link_libraries(annotate_arrow PRIVATE Michi ${GTEST_LDFLAGS} -fsanitize=address)
endif()
option(BUILD_YOLO_SCRIPT "Build run_yolo.cpp for running YOLO ONNX models" OFF)
if (BUILD_YOLO_SCRIPT )
    add_executable(run_yolo bin/run_yolo.cpp)
    add_dependencies(run_yolo Michi)
    target_link_libraries(run_yolo PRIVATE Michi ${GTEST_LDFLAGS} -fsanitize=address)
endif()
option(BUILD_BEHAVIOR_TREE_SCRIPT "Build behavior tree script bt.cpp" OFF)
if (BUILD_BEHAVIOR_TREE_SCRIPT)
    add_executable(run_bt bin/run_bt.cpp)
    find_package(behaviortree_cpp)
    target_link_libraries(run_bt BT::behaviortree_cpp libzmq sqlite3)
endif()
option(BUILD_GZ_PROXY "Build gazebo proxy" OFF)
if (BUILD_GZ_PROXY)
    add_executable(gz_proxy bin/gz_proxy.cpp)
    target_include_directories(gz_proxy PUBLIC lib ${Asio_INCLUDE_DIRS} ${Cobs_INCLUDE_DIRS})
    target_link_libraries(gz_proxy gz-transport13 gz-msgs10 Eigen3::Eigen spdlog::spdlog ${Cobs_LDFLAGS})
endif()
option(BUILD_EKF_GZ "Build gazebo ekf" OFF)
if (BUILD_EKF_GZ )
    add_executable(run_ekf_gazebo bin/run_ekf_gazebo.cpp)
    target_include_directories(run_ekf_gazebo PUBLIC lib ${Fusion_INCLUDE_DIRS} ${Asio_INCLUDE_DIRS} ${Cobs_INCLUDE_DIRS})
    target_link_libraries(run_ekf_gazebo ${Fusion_LDFLAGS} gz-transport13 gz-msgs10 Eigen3::Eigen spdlog::spdlog ${Cobs_LDFLAGS})
endif()
option(SIM_EKF_SIM "Build ekf sim" OFF)
if (SIM_EKF_SIM )
    add_executable(ekf_sim bin/ekf_sim.cpp)
    target_include_directories(ekf_sim PUBLIC lib ${Asio_INCLUDE_DIRS} ${Cobs_INCLUDE_DIRS})
    target_link_libraries(ekf_sim gz-transport13 gz-msgs10 Eigen3::Eigen spdlog::spdlog ${Cobs_LDFLAGS})
endif()
option(MORB_SLAM_EG "Build example orb-slam" ON)
if (MORB_SLAM_EG )
    find_package(Pangolin REQUIRED)
    find_package(GLEW REQUIRED)
    # find_package(GDAL REQUIRED)
    add_executable(orb_eg bin/stereo_inertial_realsense_D435i.cc)
    target_link_libraries( orb_eg PUBLIC ${realsense2_LIBRARY})
    target_link_libraries( orb_eg PUBLIC MORB_SLAM::MORB_SLAM)
    target_link_libraries( orb_eg PUBLIC MORB_SLAM::DBoW2 )
    target_link_libraries( orb_eg PUBLIC MORB_SLAM::g2o )
    target_link_libraries( orb_eg PUBLIC MORB_SLAM::sophus )
    target_link_libraries( orb_eg PUBLIC Threads::Threads )
    target_link_libraries( orb_eg PUBLIC Eigen3::Eigen )
    target_link_libraries( orb_eg PUBLIC Boost::serialization Boost::regex )
    target_link_libraries( orb_eg PUBLIC ${OpenCV_LIBS} )
    target_link_libraries( orb_eg PUBLIC ${Pangolin_LIBRARIES} )
    # target_link_libraries(stereo_inertial_realsense_D435i PRIVATE ${PROJECT_NAME})

    # target_include_directories(orb_eg PUBLIC lib ${OpenCV_INCLUDE_DIRS} ${GLEW_INCLUDE_DIRS} ${realsense_INCLUDE_DIR} /home/sga/clones/ORB_SLAM3/include /home/sga/clones/ORB_SLAM3 /home/sga/clones/ORB_SLAM3/include/CameraModels /home/sga/clones/ORB_SLAM3/Thirdparty/Sophus ${Pangolin_INCLUDE_DIRS})
    # target_link_libraries(orb_eg Eigen3::Eigen ${GDAL_LIBS} ${OpenCV_LIBS} ${realsense2_LIBRARY} ${GLEW_LIBRARIES} /home/sga/clones/ORB_SLAM3/lib/libORB_SLAM3.so ${Pangolin_LIBRARIES} /home/sga/clones/ORB_SLAM3/Thirdparty/DBoW2/lib/libDBoW2.so /home/sga/clones/ORB_SLAM3/Thirdparty/g2o/lib/libg2o.so)
endif()
install(
    TARGETS
    RUNTIME DESTINATION
    ${CMAKE_INSTALL_PREFIX}/bin
)

